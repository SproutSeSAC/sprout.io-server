  # This is a basic workflow that is manually triggered

name: Deploy 🚀

on:
  push:
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Git Clone
      - name: Checkout
        uses: actions/checkout@v2

      # 2. Set up JDK 17
      - name: Setup JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      #  환경변수 설정
      - name: properties setting
        run: |
          echo "${{ secrets.APPLICATION_YML}}" > ./src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_DEV_YML}}" > ./src/main/resources/application-dev.yml
        working-directory: /home/runner/work/sprout.io-server/sprout.io-server

      # 3. 빌드
      - name: Build Project with Gradle
        run: ./gradlew clean build --parallel

      # 도커파일 생성
      - name: Create Dockerfile
        run: |
          echo "FROM amazoncorretto:17-alpine" > Dockerfile
          echo "WORKDIR /app" >> Dockerfile
          echo "COPY build/libs/*.jar app.jar" >> Dockerfile
          echo "ENTRYPOINT [\"java\", \"-jar\", \"/app/app.jar\", \"--spring.profiles.active=dev\"]" >> Dockerfile

      # 4. AWS CLI 설치 (GitHub Hosted Runner에는 AWS CLI가 기본 설치됨, 필요 시 확인)
      - name: Verify AWS CLI
        run: aws --version

      # 5. 로그인 ECR
      - name: Login ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 248189947715.dkr.ecr.ap-northeast-2.amazonaws.com

      # 6. Docker 이미지 생성 및 ECR에 푸시
      - name: Build and Push Docker Image to ECR
        run: |
          echo "Building Docker image"
          docker build -t back-image:latest .
          docker tag back-image:latest 248189947715.dkr.ecr.ap-northeast-2.amazonaws.com/back-image:latest
          echo "Pushing Docker image to ECR"
          docker push 248189947715.dkr.ecr.ap-northeast-2.amazonaws.com/back-image:latest

      # 7. EC2에서 Docker 이미지 실행
      - name: Deploy to EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2
        run: |
          INSTANCE_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=Sprout-EC2" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text \
            --region ap-northeast-2)
          echo "Get Public IP: ${INSTANCE_PUBLIC_IP}"
          echo "EC2_PUBLIC_IP=${INSTANCE_PUBLIC_IP}" >> $GITHUB_ENV
          
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@${INSTANCE_PUBLIC_IP} << 'EOF'
            echo "Stopping existing container if running..."
            docker stop sprout-backend || true
            docker rm sprout-backend || true

            echo "Installing AWS CLI..."
            if ! command -v aws &> /dev/null
            then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
            fi

            echo "Configuring AWS cert"
            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
            echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
            echo "[default]" > ~/.aws/config
            echo "region = ap-northeast-2" >> ~/.aws/config

            echo "Login ECR"
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 248189947715.dkr.ecr.ap-northeast-2.amazonaws.com

            echo "pull ECR"
            docker pull 248189947715.dkr.ecr.ap-northeast-2.amazonaws.com/back-image:latest

            echo "Running new container..."
            docker run -d --name sprout-backend -p 8080:8080 248189947715.dkr.ecr.ap-northeast-2.amazonaws.com/back-image:latest
          EOF
