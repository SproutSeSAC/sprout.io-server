user                    nginx;
error_log               /var/log/nginx/error.log warn;
pid                     /var/run/nginx.pid;
worker_processes        auto;
worker_rlimit_nofile    33282;

events {
    use epoll;
    worker_connections  1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';


  include       conf.d/*.conf;

  map $http_upgrade $connection_upgrade {
      default     "upgrade";
  }

  map $http_origin $allowed_origin {
      default "";
      "http://localhost:3000" $http_origin;
      "https://d2bvfhtbbf8e24.cloudfront.net" $http_origin;
      "https://dev-sprout.duckdns.org" $http_origin;
  }

  upstream springboot {
    server 127.0.0.1:8080;
    keepalive 1024;
  }

  server {
      listen        80 default_server;

      location / {
          proxy_pass          http://springboot;
          proxy_pass_request_headers    on;
          proxy_http_version  1.1;
          proxy_set_header    Connection          $connection_upgrade;
          proxy_set_header    Upgrade             $http_upgrade;

          proxy_set_header    Host                $host;
          proxy_set_header    X-Real-IP           $remote_addr;
          proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;

          proxy_set_header    Access-Token        $http_access_token;
          proxy_set_header    Refresh-Token       $http_refresh_token;

          add_header 'Access-Control-Allow-Credentials' 'true';
          add_header 'Access-Control-Allow-Origin' $allowed_origin always;

          if ($request_method = 'OPTIONS') {
              add_header 'Access-Control-Allow-Origin' $allowed_origin always;
              add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PATCH, PUT, OPTIONS';
              add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Access-Token, Refresh-Token';
              add_header 'Access-Control-Allow-Credentials' 'true';
              return 204;
          }
      }

      access_log    /var/log/nginx/access.log main;

      client_header_timeout 60;
      client_body_timeout   60;
      keepalive_timeout     60;
      gzip                  off;
      gzip_comp_level       4;

      # Include the Elastic Beanstalk generated locations
      include conf.d/elasticbeanstalk/healthd.conf;
  }

  # HTTPS
  server {
      listen 443 ssl;
      server_name dev-sprout.duckdns.org www.dev-sprout.duckdns.org;

      ssl_certificate /etc/nginx/ssl/fullchain.pem;
      ssl_certificate_key /etc/nginx/ssl/privkey.pem;

      ssl_protocols TLSv1.2 TLSv1.3;
      ssl_ciphers HIGH:!aNULL:!MD5;

      location / {
          proxy_pass          https://d2bvfhtbbf8e24.cloudfront.net;
          proxy_set_header    Host d2bvfhtbbf8e24.cloudfront.net;
          proxy_set_header    X-Real-IP $remote_addr;
          proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;

          add_header 'Access-Control-Allow-Origin' '*' always;
          add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PATCH, PUT, OPTIONS' always;
          add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
          add_header 'Access-Control-Allow-Credentials' 'true' always;

          if ($request_method = 'OPTIONS') {
              return 204;
          }
      }

      location /back/ {
          proxy_pass          http://127.0.0.1:8080/;
          proxy_set_header    Host $host;
          proxy_set_header    X-Real-IP $remote_addr;
          proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
      }

      access_log    /var/log/nginx/https_access.log main;
      error_log     /var/log/nginx/https_error.log warn;
  }
}
